import logging
import os
import time
import yt_dlp
import telebot
from telebot import types
from flask import Flask, request

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

APP_DOMAIN = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
if not APP_DOMAIN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RAILWAY_PUBLIC_DOMAIN")

WEBHOOK_URL_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{APP_DOMAIN}{WEBHOOK_URL_PATH}"

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—É—Ç–∏ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ Volume ---
# –ü—É—Ç—å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway
VOLUME_PATH = "/data" 
# –ü–∞–ø–∫–∞ –¥–ª—è cookies –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
COOKIES_DIR = os.path.join(VOLUME_PATH, "user_cookies")
# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –º–æ–∂–µ—Ç –æ—Å—Ç–∞—Ç—å—Å—è –≤ —ç—Ñ–µ–º–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
DOWNLOAD_DIR = "downloads"

TELEGRAM_FILE_LIMIT_MB = 49

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)

user_data = {}

# --- 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ö–õ–ê–°–°–´ ---

def create_directories():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ –∏ –≤ Volume, –∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    os.makedirs(COOKIES_DIR, exist_ok=True)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {DOWNLOAD_DIR}, {COOKIES_DIR}")

# ... (–ö–ª–∞—Å—Å VideoDownloader –∏ —Ñ—É–Ω–∫—Ü–∏—è cleanup_files –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def cleanup_files(filepath, cookie_path=None, persistent_cookie=False):
    try:
        if filepath and os.path.exists(filepath):
            os.remove(filepath)
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–∏–¥–µ–æ: {filepath}")
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª—è–µ–º cookie, –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º ---
        if cookie_path and os.path.exists(cookie_path) and not persistent_cookie:
            os.remove(cookie_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cookie: {cookie_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

class VideoDownloader:
    # ... (–∫–æ–¥ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def __init__(self, chat_id: int, message_id: int):
        self.chat_id = chat_id
        self.message_id = message_id
        self.last_update_time = 0

    def progress_hook(self, d):
        if d["status"] == "downloading":
            current_time = time.time()
            if current_time - self.last_update_time > 2:
                percent = d.get("_percent_str", "0.0%").strip()
                speed = d.get("_speed_str", "N/A").strip()
                eta = d.get("_eta_str", "N/A").strip()
                status_text = f"‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n\n- –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}\n- –°–∫–æ—Ä–æ—Å—Ç—å: {speed}\n- ETA: {eta}"
                try:
                    bot.edit_message_text(status_text, self.chat_id, self.message_id)
                    self.last_update_time = current_time
                except Exception as e:
                    pass
        elif d["status"] == "finished":
            bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É...", self.chat_id, self.message_id)

    def download(self, url, format_choice, cookie_file=None):
        ydl_opts = {"format": format_choice, "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s.%(ext)s"), "noplaylist": True, "progress_hooks": [self.progress_hook], "noprogress": True}
        if cookie_file and os.path.exists(cookie_file):
            ydl_opts["cookiefile"] = cookie_file
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª cookie: {cookie_file}")
        
        filepath = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                filepath = ydl.prepare_filename(info)
                ydl.download([url])
            
            bot.edit_message_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Telegram...", self.chat_id, self.message_id)
            file_size_mb = os.path.getsize(filepath) / (1024 * 1024)
            if file_size_mb > TELEGRAM_FILE_LIMIT_MB:
                bot.send_message(self.chat_id, f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë).")
                return
            with open(filepath, "rb") as video_file:
                bot.send_document(self.chat_id, document=video_file, caption=info.get('title', 'video'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            bot.send_message(self.chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)[:1000]}")
        finally:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ cookie-—Ñ–∞–π–ª –∏–∑ Volume —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ---
            is_persistent = cookie_file and COOKIES_DIR in cookie_file
            cleanup_files(filepath, persistent_cookie=is_persistent)


# --- 4. WEB-–°–ï–†–í–ï–† (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤) ---
# ... (–∫–æ–¥ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Bad Request', 400

@app.route('/health')
def health_check():
    return "OK", 200

# --- 5. –õ–û–ì–ò–ö–ê –ë–û–¢–ê (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π) ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é.", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text and not message.text.startswith('/'))
def handle_link(message):
    user_id = message.from_user.id
    user_data[user_id] = {'url': message.text}
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üèÜ –õ—É—á—à–µ–µ (–≤–∏–¥–µ–æ+–∞—É–¥–∏–æ)", callback_data="format:best"),
        types.InlineKeyboardButton("üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (m4a)", callback_data="format:m4a/bestaudio/best"),
        types.InlineKeyboardButton("üéûÔ∏è MP4 (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)", callback_data="format:bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('format:'))
def handle_format_selection(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    user_data[user_id]['format'] = call.data.split(':')[1]
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–î–∞", callback_data="cookie:yes"), types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cookie:no"))
    bot.edit_message_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ)?", call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cookie:'))
def handle_cookie_selection(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
        return
    
    if call.data.split(':')[1] == 'no':
        msg = bot.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É...", call.message.chat.id, call.message.message_id)
        downloader = VideoDownloader(chat_id=call.message.chat.id, message_id=msg.message_id)
        downloader.download(user_data[user_id]['url'], user_data[user_id]['format'])
        del user_data[user_id]
    else:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ cookie ---
        cookie_path = os.path.join(COOKIES_DIR, f"{user_id}_cookies.txt")
        if os.path.exists(cookie_path):
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π", callback_data="use_cookie:saved"),
                types.InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π", callback_data="use_cookie:upload")
            )
            bot.edit_message_text("–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cookie. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", call.message.chat.id, call.message.message_id, reply_markup=markup)
        else:
            bot.edit_message_text("–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª `cookies.txt`.", call.message.chat.id, call.message.message_id)
            bot.register_next_step_handler(call.message, handle_cookie_file)
    bot.answer_callback_query(call.id)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å cookie ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('use_cookie:'))
def handle_use_cookie_choice(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
        return
    
    choice = call.data.split(':')[1]
    if choice == 'upload':
        bot.edit_message_text("–•–æ—Ä–æ—à–æ. –ñ–¥—É –Ω–æ–≤—ã–π —Ñ–∞–π–ª `cookies.txt`.", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(call.message, handle_cookie_file)
    elif choice == 'saved':
        cookie_path = os.path.join(COOKIES_DIR, f"{user_id}_cookies.txt")
        msg = bot.edit_message_text(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π cookie. –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É...", call.message.chat.id, call.message.message_id)
        downloader = VideoDownloader(chat_id=call.message.chat.id, message_id=msg.message_id)
        downloader.download(user_data[user_id]['url'], user_data[user_id]['format'], cookie_file=cookie_path)
        del user_data[user_id]
    bot.answer_callback_query(call.id)

def handle_cookie_file(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.reply_to(message, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    if not message.document or not message.document.file_name.endswith('.txt'):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, handle_cookie_file)
        return
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (Volume) ---
        cookie_path = os.path.join(COOKIES_DIR, f"{user_id}_cookies.txt")
        with open(cookie_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        msg = bot.reply_to(message, "–§–∞–π–ª cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω. üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        downloader = VideoDownloader(chat_id=message.chat.id, message_id=msg.message_id)
        downloader.download(user_data[user_id]['url'], user_data[user_id]['format'], cookie_file=cookie_path)
        del user_data[user_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ cookies: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª cookies.")

# --- 6. –ó–ê–ü–£–°–ö ---

if __name__ == "__main__":
    create_directories()
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
