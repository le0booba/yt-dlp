import logging
import os
import time
import yt_dlp
import telebot
from telebot import types
from flask import Flask, request

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

# –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
# Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π RAILWAY_PUBLIC_DOMAIN
APP_DOMAIN = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
if not APP_DOMAIN:
    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π URL)
    # raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RAILWAY_PUBLIC_DOMAIN")
    print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RAILWAY_PUBLIC_DOMAIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ–±—Ö—É–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")
    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    APP_DOMAIN = "your-app-name.up.railway.app" 

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—à–µ–º—É –±–æ—Ç—É
WEBHOOK_URL_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{APP_DOMAIN}{WEBHOOK_URL_PATH}"

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DOWNLOAD_DIR = "downloads"
COOKIES_DIR = "user_cookies"
TELEGRAM_FILE_LIMIT_MB = 49

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ Telebot
app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
user_data = {}

# --- 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ö–õ–ê–°–°–´ (–ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è) ---
# –≠—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

def create_directories():
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    os.makedirs(COOKIES_DIR, exist_ok=True)

def cleanup_files(filepath, cookie_path=None):
    try:
        if filepath and os.path.exists(filepath):
            os.remove(filepath)
            logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
        if cookie_path and os.path.exists(cookie_path):
            os.remove(cookie_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª cookies: {cookie_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

class VideoDownloader:
    def __init__(self, chat_id: int, message_id: int):
        self.chat_id = chat_id
        self.message_id = message_id
        self.last_update_time = 0

    def progress_hook(self, d):
        if d["status"] == "downloading":
            current_time = time.time()
            if current_time - self.last_update_time > 2:
                percent = d.get("_percent_str", "0.0%").strip()
                speed = d.get("_speed_str", "N/A").strip()
                eta = d.get("_eta_str", "N/A").strip()
                status_text = f"‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n\n- –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}\n- –°–∫–æ—Ä–æ—Å—Ç—å: {speed}\n- ETA: {eta}"
                try:
                    bot.edit_message_text(status_text, self.chat_id, self.message_id)
                    self.last_update_time = current_time
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        elif d["status"] == "finished":
            bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É...", self.chat_id, self.message_id)

    def download(self, url, format_choice, cookie_file=None):
        ydl_opts = {
            "format": format_choice,
            "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s.%(ext)s"),
            "noplaylist": True,
            "progress_hooks": [self.progress_hook],
            "noprogress": True,
        }
        if cookie_file and os.path.exists(cookie_file):
            ydl_opts["cookiefile"] = cookie_file
        
        filepath = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                filepath = ydl.prepare_filename(info)
                ydl.download([url])
            
            bot.edit_message_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Telegram...", self.chat_id, self.message_id)
            file_size_mb = os.path.getsize(filepath) / (1024 * 1024)
            if file_size_mb > TELEGRAM_FILE_LIMIT_MB:
                bot.send_message(self.chat_id, f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë).")
                return
            with open(filepath, "rb") as video_file:
                bot.send_document(self.chat_id, video_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            bot.send_message(self.chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)[:1000]}")
        finally:
            cleanup_files(filepath, cookie_file)

# --- 4. WEB-–°–ï–†–í–ï–† (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤) ---

@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    """–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Bad Request', 400

@app.route('/health')
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è, —á—Ç–æ–±—ã Railway –Ω–µ —É—Å—ã–ø–ª—è–ª —Å–µ—Ä–≤–∏—Å."""
    return "OK", 200

# --- 5. –õ–û–ì–ò–ö–ê –ë–û–¢–ê (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π) ---
# –≠—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(
        message,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é.\n\n"
        f"‚ö†Ô∏è **–ü–æ–º–Ω–∏**: —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ {TELEGRAM_FILE_LIMIT_MB} –ú–ë.",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text and not message.text.startswith('/'))
def handle_link(message):
    user_id = message.from_user.id
    user_data[user_id] = {'url': message.text}
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("üèÜ –õ—É—á—à–µ–µ (–≤–∏–¥–µ–æ+–∞—É–¥–∏–æ)", callback_data="format:best")
    btn2 = types.InlineKeyboardButton("üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (m4a)", callback_data="format:m4a/bestaudio/best")
    btn3 = types.InlineKeyboardButton("üéûÔ∏è MP4 (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)", callback_data="format:bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('format:'))
def handle_format_selection(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    user_data[user_id]['format'] = call.data.split(':')[1]
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–î–∞", callback_data="cookie:yes"), types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cookie:no"))
    bot.edit_message_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ)?", call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cookie:'))
def handle_cookie_selection(call):
    user_id = call.from_user.id
    if user_id not in user_data or 'format' not in user_data[user_id]:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    if call.data.split(':')[1] == 'no':
        msg = bot.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...", call.message.chat.id, call.message.message_id)
        downloader = VideoDownloader(chat_id=call.message.chat.id, message_id=msg.message_id)
        downloader.download(user_data[user_id]['url'], user_data[user_id]['format'])
        del user_data[user_id]
    else:
        bot.edit_message_text("–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª `cookies.txt`.", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(call.message, handle_cookie_file)
    bot.answer_callback_query(call.id)

def handle_cookie_file(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.reply_to(message, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    if not message.document or not message.document.file_name.endswith('.txt'):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, handle_cookie_file)
        return
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        cookie_path = os.path.join(COOKIES_DIR, f"{user_id}_cookies.txt")
        with open(cookie_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        msg = bot.reply_to(message, "–§–∞–π–ª cookies –ø–æ–ª—É—á–µ–Ω. üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        downloader = VideoDownloader(chat_id=message.chat.id, message_id=msg.message_id)
        downloader.download(user_data[user_id]['url'], user_data[user_id]['format'], cookie_file=cookie_path)
        del user_data[user_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ cookies: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª cookies.")

# --- 6. –ó–ê–ü–£–°–ö ---

if __name__ == "__main__":
    create_directories()
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    bot.remove_webhook()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(1) 
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask
    # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
