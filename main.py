import logging
import os
import time
import yt_dlp
import telebot
from telebot import types # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "8266534937:AAGl5x7bMrattP0RUAAo_HRw1iE6PORx-jE"  # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
DOWNLOAD_DIR = "downloads"
COOKIES_DIR = "user_cookies"
TELEGRAM_FILE_LIMIT_MB = 49

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
user_data = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    os.makedirs(COOKIES_DIR, exist_ok=True)

def cleanup_files(filepath, cookie_path=None):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–≤–∏–¥–µ–æ –∏ cookies)."""
    try:
        if filepath and os.path.exists(filepath):
            os.remove(filepath)
            logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
        if cookie_path and os.path.exists(cookie_path):
            os.remove(cookie_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª cookies: {cookie_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
class VideoDownloader:
    def __init__(self, chat_id: int, message_id: int):
        self.chat_id = chat_id
        self.message_id = message_id
        self.last_update_time = 0

    def progress_hook(self, d):
        """–•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if d["status"] == "downloading":
            current_time = time.time()
            if current_time - self.last_update_time > 2:
                percent = d.get("_percent_str", "0.0%").strip()
                speed = d.get("_speed_str", "N/A").strip()
                eta = d.get("_eta_str", "N/A").strip()
                
                status_text = f"‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n\n- –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}\n- –°–∫–æ—Ä–æ—Å—Ç—å: {speed}\n- ETA: {eta}"
                
                try:
                    bot.edit_message_text(status_text, self.chat_id, self.message_id)
                    self.last_update_time = current_time
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        elif d["status"] == "finished":
            bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É...", self.chat_id, self.message_id)

    def download(self, url, format_choice, cookie_file=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
        
        ydl_opts = {
            "format": format_choice,
            "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s.%(ext)s"),
            "noplaylist": True,
            "progress_hooks": [self.progress_hook],
            "noprogress": True,
        }
        
        if cookie_file and os.path.exists(cookie_file):
            ydl_opts["cookiefile"] = cookie_file
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è cookies: {cookie_file}")

        filepath = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                filepath = ydl.prepare_filename(info)
                ydl.download([url])

            bot.edit_message_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Telegram...", self.chat_id, self.message_id)
            
            file_size_mb = os.path.getsize(filepath) / (1024 * 1024)
            if file_size_mb > TELEGRAM_FILE_LIMIT_MB:
                bot.send_message(
                    self.chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë). "
                    f"Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ {TELEGRAM_FILE_LIMIT_MB} –ú–ë."
                )
                return

            with open(filepath, "rb") as video_file:
                bot.send_document(self.chat_id, video_file)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            bot.send_message(self.chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        finally:
            cleanup_files(filepath, cookie_file)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    bot.reply_to(
        message,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é. "
        f"–¢—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ.\n\n"
        f"‚ö†Ô∏è **–ü–æ–º–Ω–∏**: —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ {TELEGRAM_FILE_LIMIT_MB} –ú–ë.",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text and not message.text.startswith('/'))
def handle_link(message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç."""
    user_id = message.from_user.id
    user_data[user_id] = {'url': message.text}

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("üèÜ –õ—É—á—à–µ–µ (–≤–∏–¥–µ–æ+–∞—É–¥–∏–æ)", callback_data="format:best")
    btn2 = types.InlineKeyboardButton("üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (m4a)", callback_data="format:m4a/bestaudio/best")
    btn3 = types.InlineKeyboardButton("üéûÔ∏è MP4 (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)", callback_data="format:bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4")
    markup.add(btn1, btn2, btn3)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('format:'))
def handle_format_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ cookies."""
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    chosen_format = call.data.split(':')[1]
    user_data[user_id]['format'] = chosen_format
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_yes = types.InlineKeyboardButton("–î–∞", callback_data="cookie:yes")
    btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cookie:no")
    markup.add(btn_yes, btn_no)
    
    bot.edit_message_text(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ)?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cookie:'))
def handle_cookie_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cookies."""
    user_id = call.from_user.id
    if user_id not in user_data or 'format' not in user_data[user_id]:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    choice = call.data.split(':')[1]
    
    if choice == 'no':
        msg = bot.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...", call.message.chat.id, call.message.message_id)
        
        downloader = VideoDownloader(chat_id=call.message.chat.id, message_id=msg.message_id)
        downloader.download(user_data[user_id]['url'], user_data[user_id]['format'])
        
        del user_data[user_id] # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        bot.edit_message_text("–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª `cookies.txt`.", call.message.chat.id, call.message.message_id)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ–∂–∏–¥–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç
        bot.register_next_step_handler(call.message, handle_cookie_file)
        
    bot.answer_callback_query(call.id)


def handle_cookie_file(message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª cookies –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ."""
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.reply_to(message, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return

    if not message.document or message.document.mime_type != 'text/plain':
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, handle_cookie_file) # –°–Ω–æ–≤–∞ –∂–¥–µ–º —Ñ–∞–π–ª
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        cookie_path = os.path.join(COOKIES_DIR, f"{user_id}_cookies.txt")
        with open(cookie_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        msg = bot.reply_to(message, "–§–∞–π–ª cookies –ø–æ–ª—É—á–µ–Ω. üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        
        downloader = VideoDownloader(chat_id=message.chat.id, message_id=msg.message_id)
        downloader.download(
            url=user_data[user_id]['url'],
            format_choice=user_data[user_id]['format'],
            cookie_file=cookie_path
        )
        
        del user_data[user_id] # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ cookies: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª cookies. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    create_directories()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # bot.polling() - —ç—Ç–æ –∏ –µ—Å—Ç—å long polling.
    # infinity_polling –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    bot.infinity_polling()
